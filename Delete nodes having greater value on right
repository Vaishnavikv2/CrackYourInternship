/*
class Node {
   int data;
   Node next;

  Node(int data) {
      this.data = data;
  }
}
*/
class Solution
{   Node reverse(Node head){
    Node curr=head;
    Node prev=null;
    while(curr!=null){
        Node nextNode=curr.next;
        curr.next=prev;
        prev=curr;
        curr=nextNode;
    }
    return prev;
}
    Node compute(Node head)
    {
        Node dummy=new Node(-1);
        Node temp=dummy;
        Node curr=head;
        Stack<Integer>stk=new Stack<>();
        stk.push(curr.data);
        curr=curr.next;
        while(curr!=null){
           while(!stk.isEmpty() && stk.peek()<curr.data){
               stk.pop();
           }
           stk.push(curr.data);
           curr=curr.next;
        }
       while(!stk.isEmpty()){
           temp.next=new Node(stk.pop());
           temp=temp.next;
       }
        return reverse(dummy.next);
    }
}
