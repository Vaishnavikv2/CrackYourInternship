class Solution {
    public int[] topKFrequent(int[] nums, int k) {
      HashMap<Integer,Integer>mpp=new HashMap<>();
      for(int num:nums){
        mpp.put(num,mpp.getOrDefault(num,0)+1);
      }
      PriorityQueue<Pair<Integer,Integer>>pq=new PriorityQueue<>(Comparator.comparingInt(Pair::getKey));
      for(Map.Entry<Integer,Integer>entry:mpp.entrySet()){
        int key=entry.getKey();
        int value=entry.getValue();
        pq.offer(new Pair(value,key));
        if(pq.size()>k){
            pq.poll();
        }
      }
      int[] res=new int[k];
      int i=0;
      while(!pq.isEmpty()){
        res[i]=pq.poll().getValue();
        i++;
      }
      return res;
    }
}
