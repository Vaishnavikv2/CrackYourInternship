class Solution {
    public boolean func(int[] nums,int target,int i,Boolean [][] dp){
        if(target==0) return true;
        if(i>=nums.length ||target < 0) return false;
        if(dp[i][target]!=null) return dp[i][target];
        boolean pick=func(nums,target-nums[i],i+1,dp);
        boolean notpick=func(nums,target,i+1,dp);
        dp[i][target]=pick|| notpick;
        return dp[i][target];
    }
    public boolean canPartition(int[] nums) {
        int n=nums.length;
        int sum=0;
        for(int i=0;i<n;i++){
          sum=sum+nums[i];
        }
        if(sum%2!=0) return false;
        int target=sum/2;
         Boolean [][] dp=new Boolean [n][target+1];
        return func(nums,target,0,dp);
    }
}
