/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode Reverse(ListNode head){
        ListNode prev=null;
        ListNode curr=head;
        while(curr!=null){
            ListNode nextNode=curr.next;
            curr.next=prev;
            prev=curr;
            curr=nextNode;
        }
        return prev;
    }
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<ListNode>stk1=new Stack<>();
       Stack<ListNode> stk2=new Stack<>();
        while(l1!=null){
            stk1.push(l1);
            l1=l1.next;
        }
        while(l2!=null){
            stk2.push(l2);
            l2=l2.next;
        }
        ListNode dummy=new ListNode(-1);
        ListNode temp=dummy;
        int carry=0;
        int sum=0;
        while(!stk1.isEmpty() || !stk2.isEmpty()){
        if(!stk1.isEmpty()){
            sum=sum+stk1.pop().val;
        }
        if(!stk2.isEmpty()){
            sum=sum+stk2.pop().val;
        }
        temp.next=new ListNode(sum%10);
        temp=temp.next;
        carry=sum/10;
        sum=carry;

    }
    if(carry!=0){
        temp.next=new ListNode(carry);
        temp=temp.next;
    }
    return Reverse(dummy.next);
    }
}
